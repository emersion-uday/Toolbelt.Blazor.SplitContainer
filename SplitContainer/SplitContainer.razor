@using System.Diagnostics.CodeAnalysis;
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime

<div @ref="_ContainerElementRef" id="@this.Id" class="split-container splitter-orientation-@(this.Orientation.ToString().ToLower()) @(this.Class)" style="@this.Style">

    <div class="pane-of-split-container" style="@this.GetPaneStyle(this.FirstPaneSize, this.FirstPaneMinSize)">
        @FirstPane
    </div>

    <div class="spliter-bar" />

    <div class="pane-of-split-container" style="@this.GetPaneStyle(this.SecondPaneSize, this.SecondPaneMinSize)">
        @SecondPane
    </div>

</div>

@code
{
    /// <summary>
    /// Gets or sets an id string applied for the "id" attribute of the split container element.
    /// </summary>
    [Parameter]
    public string? Id { get; set; }

    /// <summary>
    /// Gets or sets a CSS style string applied for the "style" attribute of the split container element.
    /// </summary>
    [Parameter]
    public string? Style { get; set; }

    /// <summary>
    /// Gets or sets a CSS class string applied for the "class" attribute of the split container element.
    /// </summary>
    [Parameter]
    public string? Class { get; set; }

    /// <summary>
    /// The left or top pane in the SplitContainer.
    /// </summary>
    [Parameter]
    public RenderFragment? FirstPane { get; set; }

    /// <summary>
    /// The right or bottom pane in the SplitContainer.
    /// </summary>
    [Parameter]
    public RenderFragment? SecondPane { get; set; }

    /// <summary>
    /// Determines if the spliter is vertical or horizontal.
    /// </summary>
    [Parameter]
    public SplitterOrientation Orientation { get; set; } = SplitterOrientation.Vertical;

    /// <summary>
    /// Determines the minimum distance of pixels of the splitter from the left or the top edge of first pane.
    /// </summary>
    [Parameter]
    public string? FirstPaneMinSize { get; set; }

    /// <summary>
    /// Determines pixel distance of the splitter from the left or top edge.<br/>
    /// You can specify the pane size to only either the <see cref="FirstPaneSize"/> or the <see cref="SecondPaneSize"/> parameter.
    /// If you specify both the <see cref="FirstPaneSize"/> or the <see cref="SecondPaneSize"/> parameters, then the splitter won't work.
    /// </summary>
    [Parameter]
    public string? FirstPaneSize { get; set; }

    /// <summary>
    /// A callback that will be invoked when the size of the first pane is changed.
    /// </summary>
    [Parameter]
    public EventCallback<string> FirstPaneSizeChanged { get; set; }

    /// <summary>
    /// Determines the minimum distance of pixels of the splitter from the right or the bottom edge of second pane.
    /// </summary>
    [Parameter]
    public string? SecondPaneMinSize { get; set; }

    /// <summary>
    /// Determines pixel distance of the splitter from the right or bottom edge.<br/>
    /// You can specify the pane size to only either the <see cref="FirstPaneSize"/> or the <see cref="SecondPaneSize"/> parameter.
    /// If you specify both the <see cref="FirstPaneSize"/> or the <see cref="SecondPaneSize"/> parameters, then the splitter won't work.
    /// </summary>
    [Parameter]
    public string? SecondPaneSize { get; set; }

    /// <summary>
    /// A callback that will be invoked when the size of the second pane is changed.
    /// </summary>
    [Parameter]
    public EventCallback<string> SecondPaneSizeChanged { get; set; }

    private DotNetObjectReference<SplitContainer>? _ThisRef;

    private ElementReference _ContainerElementRef;

    private IJSObjectReference? _Handler;

    private Lazy<Task<IJSObjectReference>> _Module;

    /// <summary>
    /// Represents a component consisting of a movable bar that divides a container's display area into two resizable panes.
    /// </summary>
    [DynamicDependency(nameof(UpdateSize))]
    public SplitContainer()
    {
        this._Module = new(async () => await this.JSRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/Toolbelt.Blazor.SplitContainer/script.min.js"));
    }

    private (int? size, string? unit) ValidateSize(string? size)
    {
        string allowedUnits = "px em vh vw";

        if (string.IsNullOrWhiteSpace(size)) return (null, null);

        string unit;
        int actualSize;

        size = size.Trim().ToLowerInvariant();
        if (size.EndsWith("%"))
            unit = "%";
        else if (size.EndsWith("rem"))
        {
            unit = "rem";
        }
        else
        {
            if(size.Length==1 )
            {
                if(!int.TryParse(size, out actualSize))
                    throw new ArgumentException($"Size value must be integer value and having allowed types {allowedUnits}");
                return (actualSize, "px");
            }

            unit = size.Substring(size.Length - 2);
            if (int.TryParse(unit, out actualSize))
                unit = "px";

            if (!allowedUnits.Contains(unit))
                throw new ArgumentException($"Invalid Size type. Allowed Size types are {allowedUnits}");
        }

        var sizeValue = size.Replace(unit, "").Trim();
        if (!int.TryParse(sizeValue, out actualSize))
        {
            throw new ArgumentException($"Size value must be integer value and having allowed types {allowedUnits}");
        }

        return (actualSize, unit);
    }

    private string GetPaneStyle(string? paneSize, string? minPaneSize)
    {
        var actualSize =  ValidateSize(paneSize);
        var minSize = ValidateSize(minPaneSize);

        var styleKey = (this.Orientation == SplitterOrientation.Vertical ? "width:" : "height:");
        return (minSize.size.HasValue ? $"min-{styleKey}{minSize.size}{minSize.unit};" : "") +
            (actualSize.size.HasValue ? $"{styleKey}{actualSize.size}{actualSize.unit};" : "flex:1;");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this._ThisRef = DotNetObjectReference.Create(this);
            var module = await this._Module.Value;
            this._Handler = await module.InvokeAsync<IJSObjectReference>("attach", this._ThisRef, this._ContainerElementRef);
        }
    }

    [JSInvokable(nameof(UpdateSize)), EditorBrowsable(EditorBrowsableState.Never)]
    public async Task UpdateSize(bool isFirstPane, int nextSize)
    {
        // Console.WriteLine($"UpdateSize = isFirstPane: {isFirstPane},  {nextSize}");
        var eventCallback = isFirstPane ? this.FirstPaneSizeChanged : this.SecondPaneSizeChanged;
        await eventCallback.InvokeAsync(nextSize.ToString());
    }

    public async ValueTask DisposeAsync()
    {
        if (this._Handler != null)
        {
            try
            {
                await this._Handler.InvokeVoidAsync("dispose");
                await this._Handler.DisposeAsync();
            }
            catch (JSDisconnectedException) { }
        }

        if (this._Module.IsValueCreated)
        {
            var module = await this._Module.Value;
            try { await module.DisposeAsync(); } catch (JSDisconnectedException) { }
        }

        this._ThisRef?.Dispose();
    }
}